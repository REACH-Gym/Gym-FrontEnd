{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n  var _result, _result$error;\n  let result = await fetchBaseQuery({\n    baseUrl: \"https://gym-backend-production-65cc.up.railway.app/\",\n    prepareHeaders: headers => {\n      headers.set(\"Authorization\", localStorage.getItem(\"access\"));\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  })(args, api, extraOptions);\n\n  // If the response is 401 (Unauthorized), try to refresh the token\n  if (((_result = result) === null || _result === void 0 ? void 0 : (_result$error = _result.error) === null || _result$error === void 0 ? void 0 : _result$error.status) === 401) {\n    const refreshToken = localStorage.getItem(\"refresh\");\n\n    // Call the refresh token endpoint to get a new access token\n    const refreshResult = await fetchBaseQuery({\n      baseUrl: \"https://gym-backend-production-65cc.up.railway.app/\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: refreshToken\n      }\n    })({\n      url: \"auth/refresh-token\"\n    }, api, extraOptions);\n    if (refreshResult !== null && refreshResult !== void 0 && refreshResult.data) {\n      // Save the new access token\n      console.log(refreshResult.data);\n      localStorage.setItem(\"access\", refreshResult.data.data.access_token);\n      localStorage.setItem(\"refresh\", refreshResult.data.data.refresh_token);\n\n      // Retry the original request with the new access token\n      result = await fetchBaseQuery({\n        baseUrl: \"https://gym-backend-production-65cc.up.railway.app/\",\n        prepareHeaders: headers => {\n          headers.set(\"Authorization\", refreshResult.data.data.access_token);\n          headers.set(\"Content-Type\", \"application/json\");\n          return headers;\n        }\n      })(args, api, extraOptions);\n    } else {\n      // If refreshing the token fails, log the user out or handle the failure\n      // Optionally, you could dispatch an action to clear auth state\n    }\n  }\n  return result;\n};\nexport const apis = createApi({\n  reducerPath: \"apis\",\n  baseQuery: baseQueryWithReauth,\n  endpoints: builder => ({\n    getAllMembers: builder.query({\n      query: () => `members`\n    }),\n    getEmployees: builder.query({\n      query: params => `employee${params}`\n    }),\n    getAllMembersAtOnce: builder.query({\n      query: () => `members?paginate=false`\n    }),\n    getMeasurements: builder.query({\n      query: ({\n        page,\n        page_size\n      }) => `members/measurements?page=${page}&page_size=${page_size}`\n    }),\n    addMeasurements: builder.mutation({\n      query: data => ({\n        url: \"members/measurements\",\n        method: \"POST\",\n        body: JSON.stringify(data)\n      })\n    }),\n    loginAdmin: builder.mutation({\n      query: data => ({\n        url: \"auth/login\",\n        method: \"POST\",\n        body: JSON.stringify(data)\n      })\n    }),\n    getGroupsMembers: builder.query({\n      query: params => `members/sessions/${params}`\n    }),\n    postSession: builder.mutation({\n      query: data => ({\n        url: \"sessions\",\n        method: \"POST\",\n        body: JSON.stringify(data)\n      })\n    }),\n    getSessions: builder.query({\n      query: params => `sessions/${params}`\n    }),\n    postSessionMember: builder.mutation({\n      query: data => ({\n        url: \"members/sessions/\",\n        method: \"POST\",\n        body: data\n      })\n    }),\n    postSchedule: builder.mutation({\n      query: data => ({\n        url: \"schedules\",\n        method: \"POST\",\n        body: JSON.stringify(data)\n      })\n    }),\n    getSchedules: builder.query({\n      query: params => `schedules/${params}`\n    }),\n    search: builder.query({\n      query: data => `${data}`\n    })\n  })\n});\nexport const {\n  useGetAllMembersQuery,\n  useGetAllMembersAtOnceQuery,\n  useGetMeasurementsQuery,\n  useLoginAdminMutation,\n  useAddMeasurementsMutation,\n  useGetGroupsMembersQuery,\n  usePostSessionMutation,\n  useGetSessionsQuery,\n  usePostScheduleMutation,\n  useGetEmployeesQuery,\n  useLazyGetSchedulesQuery,\n  useLazySearchQuery,\n  usePostSessionMemberMutation\n} = apis;","map":{"version":3,"names":["createApi","fetchBaseQuery","baseQueryWithReauth","args","api","extraOptions","_result","_result$error","result","baseUrl","prepareHeaders","headers","set","localStorage","getItem","error","status","refreshToken","refreshResult","method","Authorization","url","data","console","log","setItem","access_token","refresh_token","apis","reducerPath","baseQuery","endpoints","builder","getAllMembers","query","getEmployees","params","getAllMembersAtOnce","getMeasurements","page","page_size","addMeasurements","mutation","body","JSON","stringify","loginAdmin","getGroupsMembers","postSession","getSessions","postSessionMember","postSchedule","getSchedules","search","useGetAllMembersQuery","useGetAllMembersAtOnceQuery","useGetMeasurementsQuery","useLoginAdminMutation","useAddMeasurementsMutation","useGetGroupsMembersQuery","usePostSessionMutation","useGetSessionsQuery","usePostScheduleMutation","useGetEmployeesQuery","useLazyGetSchedulesQuery","useLazySearchQuery","usePostSessionMemberMutation"],"sources":["C:/Users/T.B/Coding/Gym-FrontEnd/src/features/api.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\r\n  let result = await fetchBaseQuery({\r\n    baseUrl: \"https://gym-backend-production-65cc.up.railway.app/\",\r\n    prepareHeaders: (headers) => {\r\n      headers.set(\"Authorization\", localStorage.getItem(\"access\"));\r\n      headers.set(\"Content-Type\", \"application/json\");\r\n      return headers;\r\n    },\r\n  })(args, api, extraOptions);\r\n\r\n  // If the response is 401 (Unauthorized), try to refresh the token\r\n  if (result?.error?.status === 401) {\r\n    const refreshToken = localStorage.getItem(\"refresh\");\r\n\r\n    // Call the refresh token endpoint to get a new access token\r\n    const refreshResult = await fetchBaseQuery({\r\n      baseUrl: \"https://gym-backend-production-65cc.up.railway.app/\",\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: refreshToken,\r\n      },\r\n    })({ url: \"auth/refresh-token\" }, api, extraOptions);\r\n\r\n    if (refreshResult?.data) {\r\n      // Save the new access token\r\n      console.log(refreshResult.data);\r\n      localStorage.setItem(\"access\", refreshResult.data.data.access_token);\r\n      localStorage.setItem(\"refresh\", refreshResult.data.data.refresh_token);\r\n\r\n      // Retry the original request with the new access token\r\n      result = await fetchBaseQuery({\r\n        baseUrl: \"https://gym-backend-production-65cc.up.railway.app/\",\r\n        prepareHeaders: (headers) => {\r\n          headers.set(\"Authorization\", refreshResult.data.data.access_token);\r\n          headers.set(\"Content-Type\", \"application/json\");\r\n          return headers;\r\n        },\r\n      })(args, api, extraOptions);\r\n    } else {\r\n      // If refreshing the token fails, log the user out or handle the failure\r\n      // Optionally, you could dispatch an action to clear auth state\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const apis = createApi({\r\n  reducerPath: \"apis\",\r\n  baseQuery: baseQueryWithReauth,\r\n  endpoints: (builder) => ({\r\n    getAllMembers: builder.query({\r\n      query: () => `members`,\r\n    }),\r\n    getEmployees: builder.query({\r\n      query: (params) => `employee${params}`,\r\n    }),\r\n    getAllMembersAtOnce: builder.query({\r\n      query: () => `members?paginate=false`,\r\n    }),\r\n    getMeasurements: builder.query({\r\n      query: ({ page, page_size }) =>\r\n        `members/measurements?page=${page}&page_size=${page_size}`,\r\n    }),\r\n    addMeasurements: builder.mutation({\r\n      query: (data) => ({\r\n        url: \"members/measurements\",\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n      }),\r\n    }),\r\n    loginAdmin: builder.mutation({\r\n      query: (data) => ({\r\n        url: \"auth/login\",\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n      }),\r\n    }),\r\n    getGroupsMembers: builder.query({\r\n      query: (params) => `members/sessions/${params}`,\r\n    }),\r\n    postSession: builder.mutation({\r\n      query: (data) => ({\r\n        url: \"sessions\",\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n      }),\r\n    }),\r\n    getSessions: builder.query({\r\n      query: (params) => `sessions/${params}`,\r\n    }),\r\n    postSessionMember: builder.mutation({\r\n      query: (data) => ({\r\n        url: \"members/sessions/\",\r\n        method: \"POST\",\r\n        body: data,\r\n      }),\r\n    }),\r\n    postSchedule: builder.mutation({\r\n      query: (data) => ({\r\n        url: \"schedules\",\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n      }),\r\n    }),\r\n    getSchedules: builder.query({\r\n      query: (params) => `schedules/${params}`,\r\n    }),\r\n    search: builder.query({\r\n      query: (data) => `${data}`,\r\n    }),\r\n  }),\r\n});\r\nexport const {\r\n  useGetAllMembersQuery,\r\n  useGetAllMembersAtOnceQuery,\r\n  useGetMeasurementsQuery,\r\n  useLoginAdminMutation,\r\n  useAddMeasurementsMutation,\r\n  useGetGroupsMembersQuery,\r\n  usePostSessionMutation,\r\n  useGetSessionsQuery,\r\n  usePostScheduleMutation,\r\n  useGetEmployeesQuery,\r\n  useLazyGetSchedulesQuery,\r\n  useLazySearchQuery,\r\n  usePostSessionMemberMutation,\r\n} = apis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}